import express from 'express';
import fetch from 'node-fetch';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import config from '../../config/default.js';

const router = express.Router();

// 获取当前文件的目录路径
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// 创建图片存储目录
const imagesDir = path.join(__dirname, '../../public/images');
if (!fs.existsSync(imagesDir)) {
  fs.mkdirSync(imagesDir, { recursive: true });
}

// OpenAI 图像生成接口
router.post('/generations', async (req, res) => {
  try {
    // 检查 Draw Things 是否启用
    if (!config.drawThings.enabled) {
      return res.status(503).json({
        error: {
          message: 'Image generation service is not enabled',
          type: 'service_unavailable',
          code: 'draw_things_disabled'
        }
      });
    }

    const { 
      prompt, 
      n = 1, 
      size = "1024x1024", 
      quality = "standard",
      style = "raw",
      response_format = "url",
      user 
    } = req.body;

    // 验证必需参数
    if (!prompt) {
      return res.status(400).json({
        error: {
          message: 'Prompt is required',
          type: 'invalid_request_error',
          code: 'missing_prompt'
        }
      });
    }

    // 解析尺寸
    const [width, height] = size.split('x').map(Number);
    if (!width || !height) {
      return res.status(400).json({
        error: {
          message: 'Invalid size format. Expected format: "1024x1024"',
          type: 'invalid_request_error',
          code: 'invalid_size'
        }
      });
    }

    console.log(`[图像生成] 开始生成图像: "${prompt}" (${width}x${height})`);

    // 转换为 Draw Things API 格式（简化版本）
    const drawThingsPayload = {
      prompt: prompt,
      negative_prompt: "",
      width: width,
      height: height,
      steps: quality === "hd" ? 30 : 20,
      cfg_scale: 7,
      batch_size: Math.min(n, 4),
      seed: -1
    };

    // 如果不是 vivid 风格，增强现实风格提示词
    if (style !== "vivid") {
      drawThingsPayload.prompt = `${prompt}, realistic, high quality, detailed, masterpiece, cinematic`;
    }

    console.log(`[图像生成] 向 Draw Things 发送请求: ${config.drawThings.baseURL}/sdapi/v1/txt2img`);

    // 向 Draw Things 发送请求
    const drawThingsResponse = await fetch(`${config.drawThings.baseURL}/sdapi/v1/txt2img`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(drawThingsPayload),
      timeout: config.drawThings.timeout
    });

    if (!drawThingsResponse.ok) {
      const errorText = await drawThingsResponse.text();
      console.error(`[图像生成] Draw Things 请求失败: ${drawThingsResponse.status} - ${errorText}`);
      
      return res.status(502).json({
        error: {
          message: 'Draw Things API request failed',
          type: 'upstream_error',
          code: 'draw_things_error',
          details: errorText
        }
      });
    }

    const drawThingsResult = await drawThingsResponse.json();
    
    if (!drawThingsResult.images || drawThingsResult.images.length === 0) {
      return res.status(502).json({
        error: {
          message: 'No images generated by Draw Things',
          type: 'upstream_error',
          code: 'no_images_generated'
        }
      });
    }

    console.log(`[图像生成] 成功生成 ${drawThingsResult.images.length} 张图像`);

    // 转换为 OpenAI 格式响应
    const images = await Promise.all(drawThingsResult.images.slice(0, n).map(async (base64Image, index) => {
      if (response_format === "b64_json") {
        return {
          b64_json: base64Image
        };
      } else {
        // 对于 URL 格式，保存 base64 图片为文件并返回真实 URL
        const timestamp = Date.now();
        const filename = `image_${timestamp}_${index}.png`;
        const filePath = path.join(imagesDir, filename);
        
        // 将 base64 转换为 buffer 并保存
        const imageBuffer = Buffer.from(base64Image, 'base64');
        fs.writeFileSync(filePath, imageBuffer);
        
        // 返回完整的 URL
        const protocol = req.protocol;
        const host = req.get('host');
        const imageUrl = `${protocol}://${host}/images/${filename}`;
        return {
          url: imageUrl
        };
      }
    }));

    // 计算 token 使用量 (估算)
    const promptTokens = Math.ceil(prompt.length / 4); // 大致估算，每4个字符约等于1个token
    const imageTokens = images.length * 1000; // 每张图片估算1000个token
    const totalTokens = promptTokens + imageTokens;

    const response = {
      created: Math.floor(Date.now() / 1000),
      data: images,
      background: "transparent",
      output_format: response_format === "b64_json" ? "b64_json" : "url",
      size: size,
      quality: quality,
      usage: {
        total_tokens: totalTokens,
        input_tokens: promptTokens,
        output_tokens: imageTokens,
        input_tokens_details: {
          text_tokens: promptTokens,
          image_tokens: 0 // 输入中没有图片
        }
      }
    };

    res.json(response);

  } catch (error) {
    console.error(`[图像生成] 错误: ${error.message}`);
    
    if (error.name === 'AbortError' || error.code === 'ECONNREFUSED') {
      return res.status(503).json({
        error: {
          message: 'Draw Things service is unavailable',
          type: 'service_unavailable',
          code: 'draw_things_unavailable'
        }
      });
    }

    res.status(500).json({
      error: {
        message: 'Internal server error during image generation',
        type: 'server_error',
        code: 'image_generation_error',
        details: error.message
      }
    });
  }
});

// 图像编辑接口 (可选实现)
router.post('/edits', async (req, res) => {
  res.status(501).json({
    error: {
      message: 'Image editing is not yet implemented',
      type: 'not_implemented_error',
      code: 'image_edit_not_implemented'
    }
  });
});

// 图像变化接口 (可选实现)
router.post('/variations', async (req, res) => {
  res.status(501).json({
    error: {
      message: 'Image variations are not yet implemented',
      type: 'not_implemented_error',
      code: 'image_variations_not_implemented'
    }
  });
});

export default router;
